/* Проект создан при помощи просмотра видео на канале "Фрилансер по жизни"
Ссылка на видео: https://youtu.be/f-irDQwt1l4 */

*,
*::before,
*::after {
  padding: 0;
  margin: 0;
  border: 0;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  /* Первая * означает "применить ко всем". Кроме того, отдельные * необходимы для применения к псевдоэлементам (здесь: ::before, ::after). По умолчанию, при обращении через * псевдоэлементы не учитываются */
}

a {
  text-decoration: none;
  /* Убираем подчёркёвание для всех ссылок */
}

ul,
ol,
li {
  list-style: none;
}

img {
  vertical-align: top;
  /* Применяется выравнивание по вертикали со значением "top" (применяется к тексту, в данном случае - внутри картинки), т.е. всегда распологается сверху */
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: inherit;
  font-size: inherit;
  /* Данные блоки будут наследовать значения указанных параметров от родительского блока */
}

html,
body {
  height: 100%;
  line-height: 1;
  font-size: 14px;
  color: #000;
}

/* ---------------------------------------------------------------------------- */
.wrapper {
  min-height: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  /* Применения свойства флекс контейнера (display: flex) и его параметра выравнивания в колонку (flex-direction: column) "приклеивает" футер внизу страницы 
  Добавляется параметр "min-height" со значением 100%, что позволяет контенту занимать всю площадь родительского блока (в данном случае, применяется ко всем трём родительским блокам: html, body, wrapper);
  */
}

.container {
  max-width: 1046px;
  padding: 0px 15px;
  margin: 0px auto;
  box-sizing: content-box;
}

.ibg {
  position: relative;
}

.ibg img {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  object-fit: cover;
  /* Свойство object-fit определяет, как содержимое заменяемого элемента, такого как <img> или <video>, должно заполнять контейнер относительно его высоты и ширины. Значение 'cover' означает, что смещаемый контент меняет свой размер таким образом, чтобы сохранять свои пропорции при заполнении блока: окончательный размер контента будет определён как "покрытие" блока, ограничиваясь его шириной и высотой. */
}

/*# sourceMappingURL=style.css.map */
/* --ШАПКА------------------------------------- */
.header {
  position: absolute;
  width: 100%;
  left: 0;
  top: 0;
  /* прибиваем к левому верхнему краю контейнера */
  z-index: 50;
  /* Хорошая практика применять к параметру "z-index" значение, кратное 10 */
}
.header__container {
  display: flex;
  min-height: 104px;
  align-items: center;
}

@media (max-width: 479px) {
  .header__container {
    min-height: 70px;
    /* Медиа запрос на изменение размера шапки (блок header__container) при уменьшении ширины экрана до 479px (параметр 'max-width') и установления минимально высоты в 70px (параметр 'min-height') - для телефонов с маленьким экраном. */
  }
}

.header__logo {
  font-size: 24px;
  font-weight: 700;
  color: inherit;
  /* Задаём цвету параметр inherit чтобы наследовались свойства, обозначенные  вверху для body (ссылки по умолчанию не наследуют свойства родительских блоков*/
}

.header__menu {
  margin: 0px 0px 0px 133px;
}

@media (max-width: 992px) {
  .header__menu {
    margin: 0px 0px 0px 80px;
    /* Медиа запрос на уменьшение внешнего отступа блока (margin) до 80px при достижении ширины 992px (параметр max-width) */
  }
}

@media (max-width: 767px) {
  .header__menu {
    margin: 0px 0px 0px 40px;
    /* Медиа запрос на уменьшение внешнего отступа блока (margin) до 40px при достижении ширины 767px (параметр max-width) - для планшетного разрешения*/
  }
}

@media (max-width: 479px) {
  .header__menu {
    margin: 0px 0px 0px 20px;
    /* Медиа запрос на уменьшение внешнего отступа блока (margin) до 20px при достижении ширины 479px (параметр max-width) - телефонов с маленьким экраном*/
  }
}

.menu {
  padding: 5px 0;
}

.menu__list {
  flex-wrap: wrap;
  /* Параметр нужен для переноса элементов списка на следующую строку при меньшем разрешении экрана (на телефонах) и избежания выхода списка за пределы экрана*/
  display: flex;
}

.menu__item {
}

.menu__item:not(:last-child) {
  margin: 0px 21px 0px 0px;
  /* Здесь мы применяем внешний отступ для всех элементов списка кроме последнего (параметр :not(:last-child)) во избежание провисающих отступов, "съедающих" лишнее пространство */
}

.menu__link {
  color: #737373;
  font-weight: 600;
  line-height: calc(24 / 14 * 100%);
  /* Функция 'calc' позволяет совершить математические операции внутри css, и в данном случае рассчитывает оптимальную высоту строки в пропорциях к остальному шрифту. Пояснение: изначально в макете параметр 'line-height' имел значение 24px. Делим на размер шрифта, указанного для всего блока body вначале css (14px) и умножаем на 100%, что приблизительно равняется 171%. */
}

@media (max-width: 479px) {
  .menu__link {
    font-size: 18px;
    /* Медиа запрос на уменьшение увеличение шрифта (font-size до 18px при достижении ширины 479px (параметр max-width) - телефонов с маленьким экраном. При этом автоматически подтягивается высота строки (line-height), т.к. значение рассчитывается в процентах */
  }
}

/* --PAGE------------------------------------- */
.page {
  flex: 1 1 auto;
  /* Даётся разрешение\запрет на следующие параметры флекса: "flex-grow" (способность дочернего блока занять всю доступную\свободную площадь родительского контейнера (не занятую другими элементами)); "flex-shrink" (способность дочернего блока сжиматься в рамках родительского контейнера); "flex-basis" (задаёт базовый размер флекс элемента по основной оси. Это свойство определяет размер контент-бокса, если не задано иначе через box-sizing). */
}

.page__mainblock {
}

.page__services {
  position: relative;
  z-index: 2;
  margin: -111px 0px 0px 0px;
  /* Ставим отрицательный внешний отступ, добавляем относительное позиционирование и индекс наложения 2, чтобы блок сервисов частично "налез" над первой страницей. 
  В этом случае нельзя применить position: absolute и отступы, т.к. в этом случае все остальные блоки не подтянутся за текущим и образуется пробел.
  */
}

/* --ПОДВАЛ------------------------------------- */
.footer {
}

/* --MAIN-BLOCK------------------------------------- */

.main-block {
  position: relative;
}

.mainblock__container {
}

.main-block__body {
  padding: 184px 0px 191px 0px;
  position: relative;
  z-index: 2;
  max-width: 400px;
}

@media (max-width: 992px) {
  .main-block__body {
    padding: 120px 0px 191px 0px;
    /* Создание медиа запроса на уменьшения внутреннего отступа контейнера с основным контентом при уменьшении ширины экрана до 992px (для большей компактности текста) */
  }
}

.main-block__body > *:not(:last-child) {
  /* Комбинация "> *" это обращение ко всем объектам первого уровня. Это значит, что в данном блоке кода свойства будут применяться только к первым блокам родительского контейнера, не затрагивая их подблоки. В данном случае, это main-block__title, main-block__text и main-block__buttons */
  margin-bottom: 0px 0px 35px 0px;
}

.main-block__title {
  font-weight: 800;
  font-size: 58px;
  line-height: calc(80 / 58 * 100%);
  /* Здесь применяется та же логика, что и в строке 154 - вычисление оптимального размера высоты строки, путём деления значения в макете на текущий размер шрифта */
  letter-spacing: 0.2px;
  /* Применяется параметр дополнительного расстояние между буквами */
}

@media (max-width: 479px) {
  .main-block__title {
    font-size: 42px;
    /* Медиа запрос на уменьшение величины шрифта заголовка при уменьшении ширины экрана до 479px (для большей компактности текста) */
  }
}

.main-block__text {
  color: #737373;
  font-size: 20px;
  line-height: calc(30 / 20 * 100%);
  /* См выше */
}

@media (max-width: 479px) {
  .main-block__text {
    color: #585757;
  }
}

.main-block__buttons {
  display: flex;
  /* Выстраивание флекс-контейнеров в линию по горизонтали, пример: https://i.stack.imgur.com/mns2H.jpg */
  flex-wrap: wrap;
  /* Разрешение флекс-контейнеру переносить дочерние элементы на новую строку при уменьшении разрешения экрана  */
  margin: -10px 0px;
  /* Уменьшаем отступ сверху и снизу от предыдущего элемент в контейнере на 10px */
}

.main-block__button {
  border-radius: 37px;
  display: flex;
  min-height: 48px;
  justify-content: center;
  align-items: center;
  letter-spacing: 0.2px;
  font-weight: 700;
  line-height: 150%;
  text-align: center;
  /* Выравнивание текста по горизонтльной оси, т.е. слева, справа, по центру, равномерно */
  padding: 5px 36px;
  margin: 10px 0px;
  /* Компенсируем уменьшение отступа сверху и снизу от предыдущего элемента на те же 10px для создания отступа для нижней кнопки при перенесении её на другую строку (уменьшение ширины экрана)*/
}

@media (max-width: 479px) {
  .main-block__button {
    flex: 1 1 100%;
    /* См. стр. 171 */
  }
}

@media (min-width: 479px) {
  .main-block__button:not(:last-child) {
    margin-right: 10px;
    /* Отступ вправо на 10px доступно только для ширины экрана > 479px (aka 'Mobile first') */
  }
}

.orange {
  background: #ff7b47;
  color: #fff;
}

.border {
  color: #0d5c63;
  border: 1px solid;
}

.main-block__image {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

@media (max-width: 1300px) {
  .main-block__image img {
    object-position: right;
    /* Создание медиа запроса для выравнивание картинки по правой стороне при изменении разрешении <= 1300px (для лучшего позиционирования фона) */
  }
}

@media (max-width: 992px) {
  .main-block__image {
    opacity: 0.5;
    /* Создание медиа запроса для увеличении прозрачности заднего фона при изменении разрешении <= 992px (для лучшей читтаемости заголовка) */
  }
}
/* ------------------------------------------------------------------------ */

.services {
}
/* .page__services-container {
  display: flex;
  align-items: center;
  width: 1046px;
  justify-content: space-between;
} */

.services__body {
  display: flex;
  margin: 0px -15px;
  flex-wrap: wrap;
}
.services__column {
  padding: 0px 15px;
  flex: 0 1 calc(1 / 3 * 100%);
  /* Значение 33.333% для параметра flex-basis нужно, чтобы колонка занимала примерно треть всего контейнера (всего в контейнере 3 колонки, 1 колонка / 3 * 100% * = 33,(3)%) */
}

@media (max-width: 992px) {
  .services__column {
    flex: 0 1 50%;
    margin: 0px 0px 30px 0px;
  }
}

.services__item {
  height: 100%;
  /* В данном случае, мы устанавливаем для элемента 100%ную высоту от родительского блока, чтобы все три колонки были одинакового размера */
  box-shadow: 0px 13px 19px rgba(0, 0, 0, 0.07);
  /* Параметр box-shadow добавляет фоновую тень к объекту\блоку\картинке, имеющий два значения - толщина (задаётся как и отступ, по часовой стрелке) и цвет тени*/
  background-color: #fff;
  padding: 35px;
}
.item-service {
}

.item-service > *:not(:last-child) {
  margin: 0px 0px 10px 0px;
}

.item-service__green {
  background-color: #0d5c63;
}

.white {
  color: #fff;
}

.item-service__icon {
}

.item-service__title {
  font-weight: 700;
  letter-spacing: 0.1px;
  font-size: 24px;
  line-height: calc(32 / 24 * 100%);
}
.item-service__text:not(:last-child) {
  color: #737373;
}
.item-service__text {
  line-height: calc(20 / 14 * 100%);
}
